import imp
#import from PyQt5.QtWidgets import QApplication, QMessageBox
# def Message.content() -> TaintSource[UserSpecified]: ...

# Taint Sources
storage = imp.load_source("storage.py", "securedrop_client")
db = imp.load_source("db.py", "securedrop_client")


def storage.get_message(session, uuid) -> TaintSource[UserSpecified]: ...
#need function/property def db.message.content() -> TaintSource[UserSpecified]: ...
def db.Reply.content() -> TaintSource[UserSpecified]: ...
def db.Message.content() -> TaintSource[UserSpecified]: ...
def db.User.fullname() -> TaintSource[UserSpecified]: ...
def db.User.initials() -> TaintSource[UserSpecified]: ...

def QtWidgets.QLineEdit() -> TaintSource[UserSpecified]: ...
def QtWidgets.QTextEdit() -> TaintSource[UserSpecified]: ...

# Taint sinks
def os.system(command: TaintSink[RemoteCodeExecution]): ...
def QtWidgets.QMessageBox.setText(self, a0: TaintSink[LocalCodeExecution]): ...
def QtWidgets.QLabel.setText(self, a0: TaintSink[LocalCodeExecution]): ...
def QtWidgets.QLabel(self, a0: TaintSink[LocalCodeExecution]): ...
def os.popen(command: TaintSink[RemoteCodeExecution], mode = ..., buffering = ...): ...#QListWidget
def subprocess.run(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals =..., start_new_session = ..., pass_fds = ..., *, capture_output = ..., check = ..., encoding = ..., errors = ..., input = ..., text = ..., timeout = ...): ... 
def subprocess.Popen.__init__(self, args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., *, encoding = ..., errors = ...): ...
def subprocess.call(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., timeout = ...): ...
def subprocess.check_call(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., timeout = ...): ...
def subprocess.check_output(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., *, timeout = ..., input = ..., encoding = ..., errors = ..., text = ...): ...
def subprocess.getstatusoutput(cmd: TaintSink[RemoteCodeExecution]): ...
def subprocess.getoutput(cmd: TaintSink[RemoteCodeExecution]): ...



#QLabel
#QWidget
#QListWidgetItem
#QHBoxLayout
#QPushButton
#QVBoxLayout, 

#QLineEdit
#QDialog
#QMenu
#QMessageBox
#QToolButton
#QTextEdit
#QStatusBar
